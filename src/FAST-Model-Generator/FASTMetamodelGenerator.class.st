"
Use me to generate the MetaModel of FAST

NOTE: I generate the Core FAST Model and the Java FAST Model because we can't currently do `resetMetadata` with extended metamodel generated by FamixNG
"
Class {
	#name : #FASTMetamodelGenerator,
	#superclass : #FamixMetamodelGenerator,
	#instVars : [
		'entity',
		'tArgument',
		'tWithArguments',
		'tParameter',
		'tWithParameters',
		'tEntity',
		'tExpression',
		'tLiteral',
		'tBooleanLiteral',
		'tCharacterLiteral',
		'tNullPointerLiteral',
		'tStringLiteral',
		'tVariableExpression',
		'tScopableEntity',
		'tBehaviouralEntity',
		'tNamedBehaviouralEntity',
		'tStatement',
		'tExpressionStatement',
		'tReturnStatement',
		'tStatementBlock'
	],
	#category : #'FAST-Model-Generator'
}

{ #category : #accessing }
FASTMetamodelGenerator class >> packageName [

	^ #'FAST-Core-Model'
]

{ #category : #accessing }
FASTMetamodelGenerator class >> prefix [
	^ #FAST
]

{ #category : #accessing }
FASTMetamodelGenerator class >> submetamodels [ 
	^ { FamixGenerator }
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTBehaviouralEntity [
	^ 'Represents a generic behavioural entity which has parameters and local variables, as well as statements. 

Can represent a SmalltalkBlock, or a JavaLambda
Subclassed for NamedBehavioural as methods/functions

Has parameters , and a body (StatementBlock).
Local variables are intended to be stored in the local entities of the body'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTBooleanLiteral [
	^ 'A boolean literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTCharacterLiteral [
	^ 'A character literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTEntity [
	^ 'A FASTEntity is an abstract class for all FAST classes

Primarily introduced to deal with symbol resolution matters.'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTExpression [
	^ 'An abstract superclass representing an expression node of a source code.'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTExpressionStatement [
	^ 'A node of a statement which is representing a single expression. '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTLiteral [
	^ 'A literal node.

Contains a value for the literal.

FLAG: should refactor some literals to core-model
    e.g.: character, int, float, string, boolean '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTNamedBehaviouralEntity [
	^ '@FLAG: May be could be removed to have a simpler core model.
Each language would have to implement it correctly then

A behavioural entity that can be referenced with a name.

Assumed to correspond to a function or a method'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTNullPointerLiteral [
	^ 'An undefined object literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTReturnStatement [
	^ 'A return statement node. Contains a reference to the expression which is returned.  '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTScopableEntity [
	^ 'A Entity with an optional scope

Statements are scopable because many statements allow to introduce local variables (e.g. for statement in Java)'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTStatement [
	^ 'An abstract subclass which represents a source code statemnet '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTStatementBlock [
	^ 'A block of statements as ones in C-like langs with {}'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTStringLiteral [
	^ 'A string literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTVariableExpression [
	^ 'A node that wraps around structural entity'
]

{ #category : #definition }
FASTMetamodelGenerator >> defineClasses [
	super defineClasses.
	entity := builder newClassNamed: #Entity comment: 'any entity'. 
]

{ #category : #definition }
FASTMetamodelGenerator >> defineHierarchy [
	super defineHierarchy.
	tEntity --|> #TEntityMetaLevelDependency.
	tExpression --|> tEntity.
	tExpression --|> tArgument. 
	
	entity --|> tEntity.
	
	tLiteral --|> tExpression.
	
	tBooleanLiteral --|> tLiteral.
	tCharacterLiteral --|> tLiteral.
	tNullPointerLiteral --|> tLiteral.
	tStringLiteral --|> tLiteral.
	tVariableExpression --|> tExpression.
	tScopableEntity --|> tEntity.
	
	tBehaviouralEntity --|> tScopableEntity.
	tBehaviouralEntity --|> tWithParameters.
	
	tNamedBehaviouralEntity --|> tBehaviouralEntity.
	tStatement --|> tScopableEntity.
	tExpressionStatement --|> tStatement.
	tReturnStatement --|> tStatement.
	tStatementBlock --|> tStatement.
	
	tVariableExpression --|> #TNamedEntity.
	tVariableExpression --|> tParameter.
	
	tNamedBehaviouralEntity --|> #TNamedEntity
]

{ #category : #definition }
FASTMetamodelGenerator >> defineProperties [
	super defineProperties.
	(tLiteral property: #value type: #String) comment: 'The literal itself as found in the source code'.
	entity
        property: #startPos type: #Number;
        property: #endPos type: #Number.
]

{ #category : #definition }
FASTMetamodelGenerator >> defineRelations [
	super defineRelations.
	(((tExpressionStatement property: #expression) comment: 'The expression of the statement') <>- ((tExpression property: #expressionStatementOwner) comment: 'The expression statement that own me (if it''s the case')) .

	(((tReturnStatement property: #expression) comment: 'The expression returned') <>- ((tExpression property: #returnOwner)
		comment: 'The return statement that own the expression (if it''s the case)')) .
		
	(((tBehaviouralEntity property: #statementBlock) comment: 'Statements block of the behavioural entity')
		<>- ((tStatementBlock property: #fastBehaviouralParent) comment: 'Behavioural entity containing the statement block.')) .
	
	(((tStatement property: #statementContainer) comment: 'Block containing this statement.') *-<> ((tStatementBlock property: #statements) comment: 'Statements enclosed in this block')) .
	
	(((tWithParameters property: #parameters) comment: 'My parameters') <>-* ((tParameter property: #parameterOwner) comment: 'parameterOwner')) . 
	
	(((tWithArguments property: #arguments) comment: 'My arguments') <>-* ((tArgument property: #argumentOwner) comment: 'my owner')) .
]

{ #category : #definition }
FASTMetamodelGenerator >> defineTraits [
	super defineTraits.
	tArgument := builder newTraitNamed: #TArgument comment: 'I can be an argument'. 
	tWithArguments := builder newTraitNamed: #TWithArguments comment: 'I have arguments'. 
	
	tParameter := builder newTraitNamed: #TParameter comment: 'I can be a parameter'. 
	tWithParameters := builder newTraitNamed: #TWithParameters comment: 'I have parameters'.
	
	tEntity := builder newTraitNamed: #TEntity comment: 'any entity'.
	tExpression := builder newTraitNamed: #TExpression comment: self commentForTExpression.
	tLiteral := builder newTraitNamed: #TLiteral comment: self commentForTLiteral.
	tBooleanLiteral := builder newTraitNamed: #TBooleanLiteral comment: self commentForTBooleanLiteral.
	tCharacterLiteral := builder newTraitNamed: #TCharacterLiteral comment: self commentForTCharacterLiteral.
	tNullPointerLiteral := builder newTraitNamed: #TNullPointerLiteral comment: self commentForTNullPointerLiteral.
	tStringLiteral := builder newTraitNamed: #TStringLiteral comment: self commentForTStringLiteral.
	tVariableExpression := builder newTraitNamed: #TVariableExpression comment: self commentForTVariableExpression.
	tScopableEntity := builder newTraitNamed: #TScopableEntity comment: self commentForTScopableEntity.
	tBehaviouralEntity := builder newTraitNamed: #TBehaviouralEntity comment: self commentForTBehaviouralEntity.
	tNamedBehaviouralEntity := builder newTraitNamed: #TNamedBehaviouralEntity comment: self commentForTNamedBehaviouralEntity.
	tStatement := builder newTraitNamed: #TStatement comment: self commentForTStatement.
	tExpressionStatement := builder newTraitNamed: #TExpressionStatement comment: self commentForTExpressionStatement.
	tReturnStatement := builder newTraitNamed: #TReturnStatement comment: self commentForTReturnStatement.
	tStatementBlock := builder newTraitNamed: #TStatementBlock comment: self commentForTStatementBlock
]
