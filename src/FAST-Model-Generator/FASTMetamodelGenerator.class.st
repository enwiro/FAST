"
Use me to generate the MetaModel of FAST

NOTE: I generate the Core FAST Model and the Java FAST Model because we can't currently do `resetMetadata` with extended metamodel generated by FamixNG
"
Class {
	#name : #FASTMetamodelGenerator,
	#superclass : #FamixMetamodelGenerator,
	#instVars : [
		'expression',
		'literal',
		'booleanLiteral',
		'characterLiteral',
		'nullPointerLiteral',
		'stringLiteral',
		'variableExpression',
		'scopableEntity',
		'behaviouralEntity',
		'statement',
		'expressionStatement',
		'returnStatement',
		'statementBlock',
		'namedBehaviouralEntity',
		'tExpression',
		'tStatement',
		'tArgument',
		'tWithArguments',
		'tParameter',
		'tWithParameters',
		'entity'
	],
	#category : #'FAST-Model-Generator'
}

{ #category : #accessing }
FASTMetamodelGenerator class >> packageName [

	^ #'FAST-Core-Model'
]

{ #category : #accessing }
FASTMetamodelGenerator class >> prefix [
	^ #FAST
]

{ #category : #accessing }
FASTMetamodelGenerator class >> submetamodels [ 
	^ { FamixGenerator }
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForBehaviouralEntity [
	^ 'Represents a generic behavioural entity which has parameters and local variables, as well as statements. 

Can represent a SmalltalkBlock, or a JavaLambda
Subclassed for NamedBehavioural as methods/functions

Has parameters , and a body (StatementBlock).
Local variables are intended to be stored in the local entities of the body'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForBooleanLiteral [
	^ 'A boolean literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForCharacterLiteral [
	^ 'A character literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForEntity [
	^ 'A FASTEntity is an abstract class for all FAST classes

Primarily introduced to deal with symbol resolution matters.'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForExpression [
	^ 'An abstract superclass representing an expression node of a source code.'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForExpressionStatement [
	^ 'A node of a statement which is representing a single expression. '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForLiteral [
	^ 'A literal node.

Contains a value for the literal.

FLAG: should refactor some literals to core-model
    e.g.: character, int, float, string, boolean '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForNamedBehaviouralEntity [
	^ '@FLAG: May be could be removed to have a simpler core model.
Each language would have to implement it correctly then

A behavioural entity that can be referenced with a name.

Assumed to correspond to a function or a method'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForNullPointerLiteral [
	^ 'An undefined object literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForReturnStatement [
	^ 'A return statement node. Contains a reference to the expression which is returned.  '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForScopableEntity [
	^ 'A Entity with an optional scope

Statements are scopable because many statements allow to introduce local variables (e.g. for statement in Java)'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForStatement [
	^ 'An abstract subclass which represents a source code statemnet '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForStatementBlock [
	^ 'A block of statements as ones in C-like langs with {}'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForStringLiteral [
	^ 'A string literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForVariableExpression [
	^ 'A node that wraps around structural entity'
]

{ #category : #definition }
FASTMetamodelGenerator >> defineClasses [
	super defineClasses.
	entity := builder
		newClassNamed: #Entity
		comment: 'any entity'.
	expression := builder newClassNamed: #Expression comment: self commentForExpression.
	literal := builder newClassNamed: #Literal comment: self commentForLiteral.
	booleanLiteral := builder newClassNamed: #BooleanLiteral comment: self commentForBooleanLiteral.
	characterLiteral := builder newClassNamed: #CharacterLiteral comment: self commentForCharacterLiteral.
	nullPointerLiteral := builder newClassNamed: #NullPointerLiteral comment: self commentForNullPointerLiteral.
	stringLiteral := builder newClassNamed: #StringLiteral comment: self commentForStringLiteral.
	variableExpression := builder newClassNamed: #VariableExpression comment: self commentForVariableExpression.
	scopableEntity := builder newClassNamed: #ScopableEntity comment: self commentForScopableEntity.
	behaviouralEntity := builder newClassNamed: #BehaviouralEntity comment: self commentForBehaviouralEntity.
	namedBehaviouralEntity := builder newClassNamed: #NamedBehaviouralEntity comment: self commentForNamedBehaviouralEntity.
	statement := builder newClassNamed: #Statement comment: self commentForStatement.
	expressionStatement := builder newClassNamed: #ExpressionStatement comment: self commentForExpressionStatement.
	returnStatement := builder newClassNamed: #ReturnStatement comment: self commentForReturnStatement.
	statementBlock := builder newClassNamed: #StatementBlock comment: self commentForStatementBlock
]

{ #category : #definition }
FASTMetamodelGenerator >> defineHierarchy [
	super defineHierarchy.
	entity --|> #TEntityMetaLevelDependency.
	expression --|> entity.
	expression --|> tArgument. 
	
	literal --|> expression.
	
	booleanLiteral --|> literal.
	characterLiteral --|> literal.
	nullPointerLiteral --|> literal.
	stringLiteral --|> literal.
	variableExpression --|> expression.
	scopableEntity --|> entity.
	
	behaviouralEntity --|> scopableEntity.
	behaviouralEntity --|> tWithParameters.
	
	namedBehaviouralEntity --|> behaviouralEntity.
	statement --|> scopableEntity.
	expressionStatement --|> statement.
	returnStatement --|> statement.
	statementBlock --|> statement.
	
	variableExpression --|> #TNamedEntity.
	variableExpression --|> tParameter.
	
	namedBehaviouralEntity --|> #TNamedEntity
]

{ #category : #definition }
FASTMetamodelGenerator >> defineProperties [
	super defineProperties.
	(literal property: #value type: #String) comment: 'The literal itself as found in the source code'.
	entity
        property: #startPos type: #Number;
        property: #endPos type: #Number.
]

{ #category : #definition }
FASTMetamodelGenerator >> defineRelations [
	super defineRelations.
	(((expressionStatement property: #expression) comment: 'The expression of the statement') <>- ((expression property: #expressionStatementOwner) comment: 'The expression statement that own me (if it''s the case')) .

	(((returnStatement property: #expression) comment: 'The expression returned') <>- ((expression property: #returnOwner)
		comment: 'The return statement that own the expression (if it''s the case)')) .
		
	(((behaviouralEntity property: #statementBlock) comment: 'Statements block of the behavioural entity')
		<>- ((statementBlock property: #fastBehaviouralParent) comment: 'Behavioural entity containing the statement block.')) .
	
	(((statement property: #statementContainer) comment: 'Block containing this statement.') *-<> ((statementBlock property: #statements) comment: 'Statements enclosed in this block')) .
	
	(((tWithParameters property: #parameters) comment: 'My parameters') <>-* ((tParameter property: #parameterOwner) comment: 'parameterOwner')) . 
	
	(((tWithArguments property: #arguments) comment: 'My arguments') <>-* ((tArgument property: #argumentOwner) comment: 'my owner')) .
]

{ #category : #definition }
FASTMetamodelGenerator >> defineTraits [
	super defineTraits.
	tArgument := builder newTraitNamed: #TArgument comment: 'I can be an argument'. 
	tWithArguments := builder newTraitNamed: #TWithArguments comment: 'I have arguments'.
	
	tParameter := builder newTraitNamed: #TParameter comment: 'I can be a parameter'. 
	tWithParameters := builder newTraitNamed: #TWithParameters comment: 'I have parameters'
]
